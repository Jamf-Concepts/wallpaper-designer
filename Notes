https://github.com/jamf/wallpaper

Payload variables:
    devicename
    serialnumber
    sitename
    asset_tag
    room
    buildingname
    departmentname

// convert between NSImage and CIImage
https://rethunk.medium.com/convert-between-nsimage-and-ciimage-in-swift-d6c6180ef026

import AppKit

extension NSImage {
    /// Generates a CIImage for this NSImage.
    /// - Returns: A CIImage optional.
    func ciImage() -> CIImage? {
        guard let data = self.tiffRepresentation,
              let bitmap = NSBitmapImageRep(data: data) else {
            return nil
        }
        let ci = CIImage(bitmapImageRep: bitmap)
        return ci
    }
    
    /// Generates an NSImage from a CIImage.
    /// - Parameter ciImage: The CIImage
    /// - Returns: An NSImage optional.
    static func fromCIImage(_ ciImage: CIImage) -> NSImage {
        let rep = NSCIImageRep(ciImage: ciImage)
        let nsImage = NSImage(size: rep.size)
        nsImage.addRepresentation(rep)
        return nsImage
    }
}



// Merge images
https://stackoverflow.com/questions/38163487/mac-os-xcode-swift-2-2-combine-2-or-more-ns-images-into-a-one-new-nsimage


## Screen references
https://www.ios-resolution.com
https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/

use NSTextView instead of textfield and removed:
    
    func control(_ control: NSControl, textView: NSTextView, doCommandBy commandSelector: Selector) -> Bool {
       
        if (commandSelector == #selector(NSResponder.insertNewline(_:))) {
            // Do something against ENTER key
            if control.tag == 0 {
                displayedText_textfield.stringValue = displayedText_textfield.stringValue + "\n"
            } else {
                // place holder for another textfield
                let pos = addText_textview.selectedRanges.first?.rangeValue.location
                print("pos: \(pos)")
                
            }
            return true
        } //else if (commandSelector == #selector(NSResponder.deleteForward(_:))) {
            // Do something against DELETE key
//            return true
//        } else if (commandSelector == #selector(NSResponder.deleteBackward(_:))) {
            // Do something against BACKSPACE key
//            return true
//        } else if (commandSelector == #selector(NSResponder.insertTab(_:))) {
            // Do something against TAB key
//            return true
//        } else if (commandSelector == #selector(NSResponder.cancelOperation(_:))) {
            // Do something against ESCAPE key
//            return true
//        }

        // return true if the action was handled; otherwise false
        return false
    }

https://stackoverflow.com/questions/11224131/creating-nsimage-from-nscolor

##Save window size:
This didn't work:  Put a name that is unique to that window (e.g. "MainWindow" or "PrefsWindow") in the Autosave field under Attributes in Interface Builder. It will then have its location saved in your User Defaults automatically.

Added WindowController:
import Cocoa
import Foundation

class WindowController: NSWindowController {
    override func windowDidLoad() {
        super.windowDidLoad()
        self.windowFrameAutosaveName = "MainAppWindow"
    }
}
        
        // constraint testing - start
//        let margins = previewFrame_imageview.layoutMarginsGuide
//        backgroundImage_imageview.translatesAutoresizingMaskIntoConstraints = false
//        let constraints = [
//            backgroundImage_imageview.centerXAnchor.constraint(equalTo: previewFrame_imageview.centerXAnchor),
//            backgroundImage_imageview.centerYAnchor.constraint(equalTo: previewFrame_imageview.centerYAnchor),
//            backgroundImage_imageview.bottomAnchor.constraint(equalTo: margins.bottomAnchor, constant: 10.0),
//            backgroundImage_imageview.topAnchor.constraint(equalTo: margins.topAnchor, constant: 10.0),
//            backgroundImage_imageview.widthAnchor.constraint(equalTo: backgroundImage_imageview.heightAnchor, multiplier: standardW/standardH)
//        ]
//        NSLayoutConstraint.activate(constraints)
        // constraint testing - end
            
//            let tmpLayer = CALayer()
//            tmpLayer.bounds = textRect
//            tmpLayer.position = CGPoint(x: 10.0, y: ((backgroundH-qrImage.size.height)*CGFloat(vertPos))+appInfo.textAdjustment)
////            tmpLayer.contents = finishedBackground
//            tmpLayer.contents = attributedText.draw(in: textRect)
//            backgroundImage_imageview.layer?.addSublayer(tmpLayer)
            
